#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 17 14:30:56 2019

@author: laurapuckett
"""

def read_file(filename):
    file = open(filename,'r')
    content = file.read() 
    file.close()
    return content

def check_chain(chain):
    for letter in chain:
        if letter not in 'actgACTG':
            print('ERROR, there is a :', letter, 'in fileA.')
            print('Please remove and supply with genetic data only (A, C, T, or G)')
            exit
            
def check_chain_lengths(chainA, chainB):
    if len(chainA) != len(chainB):
        print('ERROR, must provide chains of equal length')
        exit
        
def getMethod():
    method = input('Type 1 for the method of maximum matches, or '
               'type 2 for the method of longest continuous matches:')
    if(method == "1"):
        method = 'nMatch'
    elif(method == "2"):
        method = 'nContig'
    else:
        print('You must enter "1" or "2" for method.')
        exit
    return method
    
        
def getmaxShift(chainLength):
    maxShift = input('Enter the maximum spaces that the chain is allowd to shift by: ')
    maxShift = int(maxShift)
    if maxShift > (chainLength - 1):
        maxShift = chainLength - 1
    return maxShift


def compare_chains_nMatch(chainA, chainB):
    matches = 0
    for i in range(len(chainA)):
        if(chainA[i] == chainB[i]):
            matches = matches + 1
    return matches


def compare_chains_maxContig(chainA, chainB):
    longestContig = 0
    contig = 0
    for i in range(len(chainA)):
        if(chainA[i] == chainB[i]):
            contig = contig + 1
            if (contig > longestContig):
                    longestContig = contig
        else:
            contig = 0
            
    return longestContig

    
def shift(chainA, chainB, shifter):
    if shifter > 0:
        newchainA = '-'*shifter + chainA
        newchainB = chainB + '-'*shifter
    else:
        newchainA = chainA + '-'*abs(shifter)
        newchainB = '-'*abs(shifter) + chainB
    return (newchainA, newchainB)

    
def findMaxMatches(chainA, chainB, maxShift, method):
    maxMatches = 0
    bestShift = 'NA'
    for shiftNum in range(-1*maxShift, maxShift):
        shiftedA, shiftedB = shift(chainA, chainB, shiftNum)
        
        if(method == 'nMatch'):
            matches = compare_chains_maxContig(shiftedA, shiftedB)
            
        if(method == 'nContig'):
            matches = compare_chains_nMatch(shiftedA, shiftedB)
            
        if matches >= maxMatches:
            maxMatches = matches
            bestShift = shiftNum
            bestShiftedA = shiftedA
            bestShiftedB = shiftedB
            
    return (maxMatches, bestShift, bestShiftedA, bestShiftedB)


def printOutput(method, maxMatches, bestShift, bestShiftedA, bestShiftedB, chainA, chainB):
    print()
    if(method == 'nMatch'):
        print('The maximum number of matches is: ' + str(maxMatches))
    
    elif(method == 'nContig'):
        print('The longest contiguous matching chain is: ' + str(maxMatches))
    
    if (maxMatches > 0):
    
        if(bestShift >0):
            print('This occurs when the first chain is shifted ' + str(bestShift) + ' spaces to the right.')
    
        elif(bestShift == 0):
            print('This occurs when there is no shift.')
    
        else:
            print('This occurs when the first chain is shifted ' + str(abs(bestShift)) + ' spaces to the left.')
    
    
        if(method == 'nMatch'):
            print('The chain shift with the greatest number of matches is shown below')
        elif(method == 'nContig'):
            print('The chain shift with the greatest length of contiguous matches is shown below')
        print(bestShiftedA)
        print(bestShiftedB)
        
    else:
        print('The two original chains are: ')
        print(chainA)
        print(chainB)


def main():
## need to get chainA, chainB from file1 and file2
    import sys
    file1 = input('Enter the name of the file containing the first chain:' )
    chainA = read_file(file1)
    check_chain(chainA)

    file2 = input('Enter the name of the file containing the second chain:' )
    chainB = read_file(file2)
    check_chain(chainB)
    
    check_chain_lengths(chainA, chainB)
    chainLength = len(chainA)

    method = getMethod()
    
    maxShift = getmaxShift(chainLength)
    
    maxMatches, bestShift, bestShiftedA, bestShiftedB = findMaxMatches(chainA, chainB, maxShift, method)
    printOutput(method, maxMatches, bestShift, bestShiftedA, bestShiftedB, chainA, chainB)

# file1 = '/Users/laurapuckett/Documents/INF502/file1.txt'
# file2 = '/Users/laurapuckett/Documents/INF502/file2.txt'
# maxShift = 10
# method = 'nMatch'

main()
