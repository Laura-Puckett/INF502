#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""re
@author: laurapuckett
"""

def read_files():
    path = '/Users/laurapuckett/Documents/INF502/'
    chainList = []
    for i in ['first','second']:
        Done = False        
        while Done is False:             
            filename = input('Enter the name of the text file that contains the ' + i + ' chain: \n' )
            
            try:
                file = open((path + filename),'r')
                if filename[-4:] != '.txt':
                    raise ValueError
                    print('Not a .txt file. Must enter the name of a .txt file.')
                
            except (FileNotFoundError, ValueError):
                print('ERROR: the file: ' + filename + ' does not exist.')
                
            else:
                content = file.read() 
                file.close()
                badChain = False
                for letter in content:
                    try:
                        if letter not in 'actgACTG':
                            raise ValueError()
                    except ValueError:
                        print('ERROR: there is a "', letter, '" in fileA.')
                        print('Please provide another filename instead.')
                        badChain = True
                try:
                    if content == "":
                        raise ValueError()
                except ValueError:
                    print('The file is empty. Please provide a file with a chain.')
                    badChain = True
                    
                if badChain is False:
                    Done = True
                    chainList.append(content)
                    
    return chainList
                
            
def get_chains():
    chainsGood = False
    while chainsGood is False:
        try:
            chainList = read_files()
            chainA,chainB = chainList[0],chainList[1]
            if len(chainA) != len(chainB):
                raise ValueError
            
        except ValueError:
            print('ERROR, must provide chains of equal length')
            
        else:
            chainsGood = True
    return (chainA, chainB)

        
def getMethod():
    method = 0
    while (method != "nMatch" and method != "nContig"):
        print('What method do you want to use?')
        method = input('[1] Maximum Matches: '
                   '\n[2] Longest Continuous Match: \n')
        if(method == "1"):
            method = 'nMatch'
        elif(method == "2"):
            method = 'nContig'
        else:
            print('You must enter "1" or "2" to select a method.')
            exit
    return method
    
        
def getmaxShift(chainLength):
    haveShift = False
    while haveShift == False:
        maxShift = input('Enter the maximum spaces that the chain is allowed to shift by: \n')
        try:
            maxShift = abs(int(maxShift))
            if maxShift > (chainLength - 1):
                maxShift = chainLength - 1
        except ValueError:
            print('ERROR, you must provide an integer value')
        else:
            haveShift = True
    return maxShift


def compare_chains_nMatch(chainA, chainB):
    matches = 0
    for i in range(len(chainA)):
        if(chainA[i].upper() == chainB[i].upper()):
            matches = matches + 1
    return matches


def compare_chains_nContig(chainA, chainB):
    longestContig = 0
    contig = 0
    for i in range(len(chainA)):
        if(chainA[i] == chainB[i]):
            contig = contig + 1
            if (contig > longestContig):
                    longestContig = contig
        else:
            contig = 0
            
    return longestContig

    
def shift(chainA, chainB, shifter):
    if shifter > 0:
        newchainA = '-'*shifter + chainA
        newchainB = chainB + '-'*shifter
    else:
        newchainA = chainA + '-'*abs(shifter)
        newchainB = '-'*abs(shifter) + chainB
    return (newchainA, newchainB)

    
def findMaxMatches(chainA, chainB, maxShift, method):
    maxMatches = 0
    bestShift = 'NA'
    if maxShift >0:
        for shiftNum in range(-1*maxShift, maxShift):
            shiftedA, shiftedB = shift(chainA, chainB, shiftNum)
            if(method == 'nMatch'):
                matches = compare_chains_nMatch(shiftedA, shiftedB)  
                
            elif(method == 'nContig'):
                matches = compare_chains_nContig(shiftedA, shiftedB)
                
            if matches >= maxMatches:
                maxMatches = matches
                bestShift = shiftNum
                bestShiftedA = shiftedA
                bestShiftedB = shiftedB
    else:
        if(method == 'nMatch'):
            matches = compare_chains_nMatch(chainA, chainB)  
                
        elif(method == 'nContig'):
            matches = compare_chains_nContig(chainA, chainB)
        
        maxMatches = matches
        bestShift = 0
        bestShiftedA, bestShiftedB = chainA, chainB
            
    return (maxMatches, bestShift, bestShiftedA, bestShiftedB)


def printOutput(method, maxMatches, maxShift, bestShift, bestShiftedA, bestShiftedB, chainA, chainB):
    print('\n-------------RESULTS-------------')
    print('\nWhen there is a maximum shift of ' + str(maxShift) + ' spaces, ')

    if(method == 'nMatch'):
        print('The maximum number of matches is: ' + str(maxMatches))
    
    elif(method == 'nContig'):
        print('\nThe longest contiguous matching chain length is: ' + str(maxMatches))
    
    if (maxMatches > 0 and abs(bestShift) > 0):
    
        if(bestShift >0):
            print('\nAn example of when this occurs is when')
            print('the first chain is shifted ' + str(bestShift) + ' spaces to the right.')

    
        else:
            print('\nAn example of when this occurs is when')
            print('the first chain is shifted ' + str(abs(bestShift)) + ' spaces to the left.')

    
        print('\nThe chain combination with this shift is: ')
        print(bestShiftedA)
        print(bestShiftedB)
        
    else:
        if(maxMatches > 0 and bestShift == 0):
            print('\nAn example of when this occurs is when there is no shift.')
        print('\nThe original chains are: ')
        print(chainA)
        print(chainB)


def main():
    chainA, chainB = get_chains()
    chainLength = len(chainA)

    method = getMethod()
    
    maxShift = getmaxShift(chainLength)
    
    maxMatches, bestShift, bestShiftedA, bestShiftedB = findMaxMatches(chainA, chainB, maxShift, method)
    printOutput(method, maxMatches, maxShift, bestShift, bestShiftedA, bestShiftedB, chainA, chainB)

main()
